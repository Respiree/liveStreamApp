"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spawnThread = void 0;

var _reactNativeReanimated = require("react-native-reanimated");

const g = global;
/**
 * Runs the given function in a custom thread, in a custom parallel runtime.
 *
 * _Note: Despite it's name, Threads are actually not spawned on demand and will be re-used. (Thread-Pool)_
 *
 * @example
 * ```ts
 * const result = await spawnThread(() => {
 *   const someValue = doExpensiveCalculation()
 *   return someValue
 * })
 * ```
 */

const spawnThread = g.spawnThread; // TODO: Find a way to automatically bind console once I can spawn multiple threads. Possibly through a member function: Thread.polyfillConsole()

exports.spawnThread = spawnThread;
const capturableConsole = console;
spawnThread(() => {
  'worklet';

  const console = {
    debug: (0, _reactNativeReanimated.runOnJS)(capturableConsole.debug),
    log: (0, _reactNativeReanimated.runOnJS)(capturableConsole.log),
    warn: (0, _reactNativeReanimated.runOnJS)(capturableConsole.warn),
    error: (0, _reactNativeReanimated.runOnJS)(capturableConsole.error),
    info: (0, _reactNativeReanimated.runOnJS)(capturableConsole.info)
  };

  _setGlobalConsole(console);
});
//# sourceMappingURL=index.js.map