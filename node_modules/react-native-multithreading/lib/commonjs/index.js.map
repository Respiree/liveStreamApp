{"version":3,"sources":["index.ts"],"names":["g","global","spawnThread","capturableConsole","console","debug","log","warn","error","info","_setGlobalConsole"],"mappings":";;;;;;;AAAA;;AAGA,MAAMA,CAAC,GAAGC,MAAV;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMC,WAAW,GAAGF,CAAC,CAACE,WAAtB,C,CAEP;;;AACA,MAAMC,iBAAiB,GAAGC,OAA1B;AACAF,WAAW,CAAC,MAAM;AAChB;;AACA,QAAME,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAE,oCAAQF,iBAAiB,CAACE,KAA1B,CADO;AAEdC,IAAAA,GAAG,EAAE,oCAAQH,iBAAiB,CAACG,GAA1B,CAFS;AAGdC,IAAAA,IAAI,EAAE,oCAAQJ,iBAAiB,CAACI,IAA1B,CAHQ;AAIdC,IAAAA,KAAK,EAAE,oCAAQL,iBAAiB,CAACK,KAA1B,CAJO;AAKdC,IAAAA,IAAI,EAAE,oCAAQN,iBAAiB,CAACM,IAA1B;AALQ,GAAhB;;AAOAC,EAAAA,iBAAiB,CAACN,OAAD,CAAjB;AACD,CAVU,CAAX","sourcesContent":["import 'react-native-reanimated';\nimport { runOnJS } from 'react-native-reanimated';\n\nconst g = global as any;\n\n/**\n * Runs the given function in a custom thread, in a custom parallel runtime.\n *\n * _Note: Despite it's name, Threads are actually not spawned on demand and will be re-used. (Thread-Pool)_\n *\n * @example\n * ```ts\n * const result = await spawnThread(() => {\n *   const someValue = doExpensiveCalculation()\n *   return someValue\n * })\n * ```\n */\nexport const spawnThread = g.spawnThread as <T>(run: () => T) => Promise<T>;\n\n// TODO: Find a way to automatically bind console once I can spawn multiple threads. Possibly through a member function: Thread.polyfillConsole()\nconst capturableConsole = console;\nspawnThread(() => {\n  'worklet';\n  const console = {\n    debug: runOnJS(capturableConsole.debug),\n    log: runOnJS(capturableConsole.log),\n    warn: runOnJS(capturableConsole.warn),\n    error: runOnJS(capturableConsole.error),\n    info: runOnJS(capturableConsole.info),\n  };\n  _setGlobalConsole(console);\n});\n"]}