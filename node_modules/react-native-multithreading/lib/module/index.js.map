{"version":3,"sources":["index.ts"],"names":["runOnJS","g","global","spawnThread","capturableConsole","console","debug","log","warn","error","info","_setGlobalConsole"],"mappings":"AAAA,OAAO,yBAAP;AACA,SAASA,OAAT,QAAwB,yBAAxB;AAEA,MAAMC,CAAC,GAAGC,MAAV;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGF,CAAC,CAACE,WAAtB,C,CAEP;;AACA,MAAMC,iBAAiB,GAAGC,OAA1B;AACAF,WAAW,CAAC,MAAM;AAChB;;AACA,QAAME,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAEN,OAAO,CAACI,iBAAiB,CAACE,KAAnB,CADA;AAEdC,IAAAA,GAAG,EAAEP,OAAO,CAACI,iBAAiB,CAACG,GAAnB,CAFE;AAGdC,IAAAA,IAAI,EAAER,OAAO,CAACI,iBAAiB,CAACI,IAAnB,CAHC;AAIdC,IAAAA,KAAK,EAAET,OAAO,CAACI,iBAAiB,CAACK,KAAnB,CAJA;AAKdC,IAAAA,IAAI,EAAEV,OAAO,CAACI,iBAAiB,CAACM,IAAnB;AALC,GAAhB;;AAOAC,EAAAA,iBAAiB,CAACN,OAAD,CAAjB;AACD,CAVU,CAAX","sourcesContent":["import 'react-native-reanimated';\nimport { runOnJS } from 'react-native-reanimated';\n\nconst g = global as any;\n\n/**\n * Runs the given function in a custom thread, in a custom parallel runtime.\n *\n * _Note: Despite it's name, Threads are actually not spawned on demand and will be re-used. (Thread-Pool)_\n *\n * @example\n * ```ts\n * const result = await spawnThread(() => {\n *   const someValue = doExpensiveCalculation()\n *   return someValue\n * })\n * ```\n */\nexport const spawnThread = g.spawnThread as <T>(run: () => T) => Promise<T>;\n\n// TODO: Find a way to automatically bind console once I can spawn multiple threads. Possibly through a member function: Thread.polyfillConsole()\nconst capturableConsole = console;\nspawnThread(() => {\n  'worklet';\n  const console = {\n    debug: runOnJS(capturableConsole.debug),\n    log: runOnJS(capturableConsole.log),\n    warn: runOnJS(capturableConsole.warn),\n    error: runOnJS(capturableConsole.error),\n    info: runOnJS(capturableConsole.info),\n  };\n  _setGlobalConsole(console);\n});\n"]}